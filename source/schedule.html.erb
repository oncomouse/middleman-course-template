---
page_link_name: "Schedule"
---
<%
	# As a rule, don't edit this file.
	#
	# If you need to change the course schedule, edit data/schedule.yml
	#
	# If you need to change the description, edit source/partials/_schedule-description.md
%>
<%= partial "partials/schedule-description" %>
<%

def generateScheduleData(schedule)
	if schedule.has_key? 'classes'
		today = schedule['start']
		holiday_dates = schedule['holidays'].map { |x| x['date'] }
		holiday_names = schedule['holidays'].map { |x| x.has_key?('name') ? x['name'] : nil }
		current_meeting = 0
		current_day = 0
		current_week = 1
		current_unit = 1
	
		data_structure = {
		
		}
		# Calculate the first class meeting:
		catch (:done) do
			schedule['meets'].sort{ |a,b| Chronic.parse(a).to_date.strftime('%w').to_i <=> Chronic.parse(b).to_date.strftime('%w').to_i }.each do |meeting|
				if today.strftime('%w').to_i < Chronic.parse(meeting).to_date.strftime('%w').to_i 
					today = Chronic.parse("next #{meeting}", :now => today).to_date
					throw :done
				elsif today.strftime('%w').to_i == Chronic.parse(meeting).to_date.strftime('%w').to_i 
					#current_meeting += 1
					throw :done
				else
					#if current_meeting == 0
					#	current_week += 1
					#end
					current_meeting += 1
				end
			end
		end
	
		# Parse through the semester:
		while today <= schedule['end'] + 1
			# Figure out the day content (either a holiday or out of the schedule):
			if holiday_dates.index(today).is_a? Integer
				day = "**No Class**\n\n#{if not holiday_names[holiday_dates.index(today)].nil? then '*' +  holiday_names[holiday_dates.index(today)] + '*' end}"
				data_structure[today.to_s] = day
			else
				data_structure[today.to_s] = nil
			end
			# Update the next meeting day:
			current_meeting += 1
		
			# If we're at the end of the week, close the .week div and reset to next week:
			if current_meeting >= schedule['meets'].length
				current_meeting = 0
			end
			# Generate the next day we will look at in the next iteration of the loop:
			today = Chronic.parse("next #{schedule['meets'][current_meeting]}", :now => today).to_date
		end
		
		# Handle redefined days:
		if schedule.has_key? 'redefined'
			schedule['redefined'].each do |redefined_day|
				if schedule['meets'].index(redefined_day['is_a']) != nil
					data_structure[redefined_day['date'].to_s] = nil
				elsif schedule['meets'].index(redefined_day['date'].strftime("%A").downcase) != nil and schedule['meets'].index(redefined_day['is_a']) == nil
					data_structure[redefined_day['date'].to_s] = "**No Class**\n\n*Redefined Day (Go To #{redefined_day['is_a'].capitalize} Classes)*"
				end
			end
		end
	end
	return data_structure
end
%>
<div class="schedule">
	<%
	current_meeting = 0
	current_week = 1
	current_unit = 1
	current_day = 0
	
	# Cache the sorted list of class meetings:
	sorted_meetings = data['schedule']['meets'].sort{ |a,b| Chronic.parse(a).to_date.strftime('%w').to_i <=> Chronic.parse(b).to_date.strftime('%w').to_i }
	
	data_structure = generateScheduleData(data['schedule'])
	
	data_structure.keys.sort.each do |today|
		today = Chronic.parse(today)
		# Open a new week if we're at the start of the week:
		if current_meeting == 0
			if data['schedule'].has_key?('units') and data['schedule']['units'].index{ |a| a['start'] == current_week }%>
				<div class="week">
					<h2>Unit <%=current_unit%>: <%=data['schedule']['units'][data['schedule']['units'].index{ |a| a['start'] == current_week }]['title'] %></h2>
					<% if data['schedule']['units'][data['schedule']['units'].index{ |a| a['start'] == current_week }].has_key? 'description' %>
					<%= Tilt['markdown'].new(config[:markdown]) { data['schedule']['units'][data['schedule']['units'].index{ |a| a['start'] == current_week }]['description'] }.render %>
					<%end%>
				</div>
			<% 
				current_unit += 1
			end %>
<div class="week">
	<h<%=data['schedule'].has_key?('units') ? 3 : 2%>>Week <%= current_week%> <% if data['schedule'].has_key? 'weeks' and data['schedule']['weeks'].has_key? current_week then%><span class="title"><%= data['schedule']['weeks'][current_week]%></span><% end %></h<%=data['schedule'].has_key?('units') ? 3 : 2%>>
		<%
			current_week += 1
		end 
		# Create a new day and print the date:
		%>
	<div class="col-sm-<%=(12 / data['schedule']['meets'].length)%>">
		<p><strong><%=today.strftime('%a %m/%d')%></strong></p>
		<%
			
			# Figure out the day content (either a holiday or out of the schedule):
			if not data_structure[today.to_date.to_s].nil?
				day = data_structure[today.to_date.to_s]
			else
				day = data['schedule']['classes'][current_day]
				current_day += 1
			end
			if day.nil?
				day = ''
			end

		%>
		<%=  
			# Render the content of the day using Markdown:
			Tilt['markdown'].new(config[:markdown]) { day }.render %>
	</div>
		<%
		# Update the next meeting day:
		current_meeting += 1
		
		# If we're at the end of the week, close the .week div and reset to next week:
		if current_meeting == data['schedule']['meets'].length%>
</div>
		<%
			current_meeting = 0
		end
	end
	%>
</div>